#!/usr/bin/env python3
#
# Copy submitted files via Microsoft Forms with normalized names.
# Copyright (c) 2020, Hiroyuki Ohsaki.
# All rights reserved.
#

from collections import defaultdict
import os
import re
import shutil
import sys
import tkinter
import tkinter.filedialog
import tkinter.messagebox
import urllib.parse

from perlcompat import die, warn, getopts
import openpyxl

# FIXME: avoid hardcoding
ID_COL = 3  # Microsoft ID (abc12345@nuc.kwansei.ac.jp)
NAME_COL = 4  # Name
Q_START_COL = 5

def usage():
    die(f"""\
usage: {sys.argv[0]} [-v] [XLSX-file]
  -v    verbose mode
""")

def normalize_id(id_):
    """Return the normalized ID for specified Microsoft ID ID_."""
    # simply remove the domain part from the email address
    return re.sub(r'@.+$', '', id_)

def normalize_name(name):
    """Return the normalized name for NAME."""
    # replace all spaces with underscores
    return name.replace(' ', '_')

def normalize_path(id_, name, qid, path, count):
    """Generate a filename for a local file FILE, which is submitted by user
    with ID_ and NAME for QID-th question.  The dictionary COUNT is used for
    checking duplicate submissions."""
    prefix = f'q{qid}-{id_}-{name}'
    key = prefix
    if count[key] >= 1:  # duplicate submission?
        prefix += f'-{count[key] + 1}'
    count[key] += 1
    # extract the file extension
    dir_ = os.path.dirname(path)
    base = os.path.basename(path)
    # FIXME: should change to lowercase
    ext = re.sub(r'^.+\.', '', base)
    return os.path.join(prefix + f'.{ext}')

def parse_book(book, verbose):
    """Look through the first worksheet of the Excel book BOOK, and copy all
    submitted files with normalized names."""
    count = defaultdict(int)
    # use the first sheet
    sheet = list(book)[0]
    for row in sheet.iter_rows(min_row=2):  # skip the header
        # extract the information on the respondent
        id_ = normalize_id(row[ID_COL].value)
        name = normalize_name(row[NAME_COL].value)
        for cell in row[Q_START_COL:]:
            if not cell.value:
                continue
            v = urllib.parse.unquote(cell.value)
            # check if the value is a SharePoint (OneDrive) resource URL
            m = re.search(r'\.sharepoint\.com/.*/Microsoft Forms/(.+)$', v)
            if m:
                path = m.group(1)
                qid = cell.column - Q_START_COL
                newpath = normalize_path(id_, name, qid, path, count)
                if newpath:
                    if verbose:
                        warn(f"copying '{path}' to '{newpath}'...")
                    shutil.copyfile(path, newpath)

def main():
    opt = getopts('v') or usage()
    verbose = opt.v
    verbose = True

    # hide tkinter root window
    root = tkinter.Tk()
    root.withdraw()

    try:
        response_file = sys.argv[1]
    except IndexError:
        response_file = tkinter.filedialog.askopenfilename(
            title='Select Microsoft Forms response file',
            filetypes=[('Microsoft Excel file', '.xlsx')])
    book = openpyxl.load_workbook(response_file)
    parse_book(book, verbose)

if __name__ == "__main__":
    main()
