#!/usr/bin/env python3
#
# Copy submitted files via Microsoft Forms with normalized names.
# Copyright (c) 2020, Hiroyuki Ohsaki.
# All rights reserved.
#

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

from collections import defaultdict
import os
import re
import shutil
import sys
import tkinter
import tkinter.filedialog
import tkinter.messagebox
import urllib.parse

from perlcompat import die, warn, getopts
import openpyxl

# FIXME: avoid hardcoding
ID_COL = 3  # Microsoft ID (abc12345@nuc.kwansei.ac.jp)
NAME_COL = 4  # Name
Q_START_COL = 5  # the first column of the queries

def usage():
    die(f"""\
usage: {sys.argv[0]} [XLSX-file] [dir]
""")

def normalized_id(id_):
    """Return the normalized ID for specified Microsoft ID ID_."""
    # simply remove the domain part from the email address
    return re.sub(r'@.+$', '', id_)

def normalized_name(name):
    """Return the normalized name for NAME."""
    # replace all spaces with underscores
    return name.replace(' ', '_')

def normalized_path(file, id_, name, qid, dir_, count):
    """Return a normalized path name for a file FILE stored under the
    dictionary DIR_.  The file is submitted by a respondent having ID_ and
    NAME for the QID-th question.  The dictionary COUNT is used for checking
    duplicate submissions."""
    prefix = f'q{qid}-{id_}-{name}'
    key = prefix
    if count[key] >= 1:  # is duplicate submission?
        prefix += f'-{count[key] + 1}'
    count[key] += 1
    # extract the file extension
    # FIXME: should be lowercase
    ext = re.sub(r'^.+\.', '', file)
    return os.path.join(dir_, prefix + f'.{ext}')

def normalize_file(v, id_, name, qid, dir_, count):
    """Copy the local file corresponding to the SharePoint URL V with a
    normalized name.  See the dochelp of normalized_path for other
    parameters."""
    v = urllib.parse.unquote(v)
    # check if the value is a SharePoint (OneDrive) resource URL
    m = re.search(r'/Microsoft Forms/(.+?)/(.+?)/(.+?)$', v)
    if m:
        formdir, qdir, file = m.groups()
        path = os.path.join(dir_, qdir, file)
        if not os.path.exists(path):
            tkinter.messagebox.showerror(message=f"File '{path}' not found")
            return
        newpath = normalized_path(file, id_, name, qid, dir_, count)
        shutil.copyfile(path, newpath)

def parse_book(book, dir_):
    """Look through the first worksheet of the Excel book BOOK, and copy all
    submitted files stored under the directory DIR_ with normalized names."""
    count = defaultdict(int)
    # use the first sheet
    sheet = list(book)[0]
    for row in sheet.iter_rows(min_row=2):  # skip the header
        # extract the information on the respondent
        id_ = normalized_id(row[ID_COL].value)
        name = normalized_name(row[NAME_COL].value)
        for cell in row[Q_START_COL:]:
            if not cell.value:
                continue
            if '.sharepoint.com/' in cell.value:
                qid = cell.column - Q_START_COL
                normalize_file(cell.value, id_, name, qid, dir_, count)

def main():
    # hide tkinter root window
    root = tkinter.Tk()
    root.withdraw()

    try:
        response_file = sys.argv[1]
    except IndexError:
        response_file = tkinter.filedialog.askopenfilename(
            title='Select Microsoft Forms response file',
            filetypes=[('Microsoft Excel file', '.xlsx')])
    book = openpyxl.load_workbook(response_file)

    try:
        dir_ = sys.argv[2]
    except IndexError:
        dir_ = tkinter.filedialog.askdirectory(
            title='Select the directory containing uploaded files')
    parse_book(book, dir_)

if __name__ == "__main__":
    main()
